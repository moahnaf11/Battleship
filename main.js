(()=>{"use strict";var n={208:(n,e,t)=>{t.d(e,{A:()=>h});var r=t(354),i=t.n(r),o=t(314),a=t.n(o),s=t(417),l=t.n(s),c=new URL(t(637),t.b),d=new URL(t(814),t.b),A=a()(i()),p=l()(c),u=l()(d);A.push([n.id,`@font-face {\n    font-family: 'intro_rust_gbase_2_line';\n    src: url(${p}) format('woff2');\n    font-weight: normal;\n    font-style: normal;\n\n}\n\n@font-face {\n    font-family: 'source_sans_proextralight';\n    src: url(${u}) format('woff2');\n    font-weight: normal;\n    font-style: normal;\n\n}\n\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    height: 100vh;\n    display: grid;\n    grid-template-columns: 1fr;\n    grid-auto-rows: min-content auto auto;\n    background-color: #94a3b8;\n    \n}\n\nh1 {\n    font-family: 'intro_rust_gbase_2_line', sans-serif;\n}\n\nheader {\n    padding: 2%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.container {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 30px;\n    margin-bottom: 10px;\n}\n\n.player, .computer {\n    padding: 2%;\n    height: 500px;\n    width: 500px;\n    border-radius: 20px;\n    box-shadow: 0px 0px 5px 3px #475569;\n    position: relative;\n    background-color: #93c5fd;\n}\n\n.computer {\n    padding-top: 5.5%;\n}\n\n.player {\n    display: flex;\n    flex-direction: column;\n\n}\n\n\n\n.button-container {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\nbutton {\n    display: inline-block;\n    width: 50px;\n    height: 50px;\n    border-radius: 15px;\n    border: none;\n    background-color: #3b82f6;\n}\n\nbutton > img {\n    width: 30px;\n    height: 30px;\n}\n\nbutton:hover {\n    background-color: #1e40af;\n    box-shadow: 0px 0px 5px 3px #334155;\n}\n\n.grid-container {\n    height: 100%;\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n    gap: 2px;\n    \n}\n\n.grid-container > div {\n    background-color: #a1a1aa;\n    border: 1px solid black;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 1.8rem;\n    position: relative;\n    border-radius: 10px;\n    font-weight: 900;\n}\n\n.grid-container > div:hover {\n    background-color: #c026d3;\n}\n\n.start-button {\n    display: flex;\n    justify-content: center;\n}\n\n.start-button > button {\n    width: 150px;\n    min-width: 100px;\n    font-size: 1.1rem;\n    font-family: 'intro_rust_gbase_2_line', sans-serif;\n}\n\n.player > .grid-container > div > img {\n    top: 50%;\n    left: 50%;\n    position: absolute;\n}\n\n.computer > .grid-container > div > img {\n    top: 50%;\n    left: 50%;\n    position: absolute;\n    display: none;\n}\n\ndiv.display {\n    font-family: 'intro_rust_gbase_2_line', sans-serif;\n}\n\n.restart {\n    display: none;\n}\n\n\n`,"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,sCAAsC;IACtC,4DAAgE;IAChE,mBAAmB;IACnB,kBAAkB;;AAEtB;;AAEA;IACI,wCAAwC;IACxC,4DAAoE;IACpE,mBAAmB;IACnB,kBAAkB;;AAEtB;;AAEA;IACI,SAAS;IACT,UAAU;IACV,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,aAAa;IACb,0BAA0B;IAC1B,qCAAqC;IACrC,yBAAyB;;AAE7B;;AAEA;IACI,kDAAkD;AACtD;;AAEA;IACI,WAAW;IACX,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,SAAS;IACT,mBAAmB;AACvB;;AAEA;IACI,WAAW;IACX,aAAa;IACb,YAAY;IACZ,mBAAmB;IACnB,mCAAmC;IACnC,kBAAkB;IAClB,yBAAyB;AAC7B;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,sBAAsB;;AAE1B;;;;AAIA;IACI,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;AACvB;;AAEA;IACI,qBAAqB;IACrB,WAAW;IACX,YAAY;IACZ,mBAAmB;IACnB,YAAY;IACZ,yBAAyB;AAC7B;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,yBAAyB;IACzB,mCAAmC;AACvC;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,sCAAsC;IACtC,mCAAmC;IACnC,QAAQ;;AAEZ;;AAEA;IACI,yBAAyB;IACzB,uBAAuB;IACvB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,iBAAiB;IACjB,kBAAkB;IAClB,mBAAmB;IACnB,gBAAgB;AACpB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,uBAAuB;AAC3B;;AAEA;IACI,YAAY;IACZ,gBAAgB;IAChB,iBAAiB;IACjB,kDAAkD;AACtD;;AAEA;IACI,QAAQ;IACR,SAAS;IACT,kBAAkB;AACtB;;AAEA;IACI,QAAQ;IACR,SAAS;IACT,kBAAkB;IAClB,aAAa;AACjB;;AAEA;IACI,kDAAkD;AACtD;;AAEA;IACI,aAAa;AACjB",sourcesContent:["@font-face {\n    font-family: 'intro_rust_gbase_2_line';\n    src: url('./introrustg-base2line-webfont.woff2') format('woff2');\n    font-weight: normal;\n    font-style: normal;\n\n}\n\n@font-face {\n    font-family: 'source_sans_proextralight';\n    src: url('./sourcesanspro-extralight-webfont.woff2') format('woff2');\n    font-weight: normal;\n    font-style: normal;\n\n}\n\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    height: 100vh;\n    display: grid;\n    grid-template-columns: 1fr;\n    grid-auto-rows: min-content auto auto;\n    background-color: #94a3b8;\n    \n}\n\nh1 {\n    font-family: 'intro_rust_gbase_2_line', sans-serif;\n}\n\nheader {\n    padding: 2%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.container {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 30px;\n    margin-bottom: 10px;\n}\n\n.player, .computer {\n    padding: 2%;\n    height: 500px;\n    width: 500px;\n    border-radius: 20px;\n    box-shadow: 0px 0px 5px 3px #475569;\n    position: relative;\n    background-color: #93c5fd;\n}\n\n.computer {\n    padding-top: 5.5%;\n}\n\n.player {\n    display: flex;\n    flex-direction: column;\n\n}\n\n\n\n.button-container {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\nbutton {\n    display: inline-block;\n    width: 50px;\n    height: 50px;\n    border-radius: 15px;\n    border: none;\n    background-color: #3b82f6;\n}\n\nbutton > img {\n    width: 30px;\n    height: 30px;\n}\n\nbutton:hover {\n    background-color: #1e40af;\n    box-shadow: 0px 0px 5px 3px #334155;\n}\n\n.grid-container {\n    height: 100%;\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n    gap: 2px;\n    \n}\n\n.grid-container > div {\n    background-color: #a1a1aa;\n    border: 1px solid black;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 1.8rem;\n    position: relative;\n    border-radius: 10px;\n    font-weight: 900;\n}\n\n.grid-container > div:hover {\n    background-color: #c026d3;\n}\n\n.start-button {\n    display: flex;\n    justify-content: center;\n}\n\n.start-button > button {\n    width: 150px;\n    min-width: 100px;\n    font-size: 1.1rem;\n    font-family: 'intro_rust_gbase_2_line', sans-serif;\n}\n\n.player > .grid-container > div > img {\n    top: 50%;\n    left: 50%;\n    position: absolute;\n}\n\n.computer > .grid-container > div > img {\n    top: 50%;\n    left: 50%;\n    position: absolute;\n    display: none;\n}\n\ndiv.display {\n    font-family: 'intro_rust_gbase_2_line', sans-serif;\n}\n\n.restart {\n    display: none;\n}\n\n\n"],sourceRoot:""}]);const h=A},314:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,i,o){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var c=0;c<n.length;c++){var d=[].concat(n[c]);r&&a[d[0]]||(void 0!==o&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=o),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),i&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=i):d[4]="".concat(i)),e.push(d))}},e}},417:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},354:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},72:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var o={},a=[],s=0;s<n.length;s++){var l=n[s],c=r.base?l[0]+r.base:l[0],d=o[c]||0,A="".concat(c," ").concat(d);o[c]=d+1;var p=t(A),u={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var h=i(u,r);r.byIndex=s,e.splice(s,0,{identifier:A,updater:h,references:1})}a.push(A)}return a}function i(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,i){var o=r(n=n||[],i=i||{});return function(n){n=n||[];for(var a=0;a<o.length;a++){var s=t(o[a]);e[s].references--}for(var l=r(n,i),c=0;c<o.length;c++){var d=t(o[c]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}o=l}}},659:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},540:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,i&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},637:(n,e,t)=>{n.exports=t.p+"5dda7e9ab64c58568679.woff2"},814:(n,e,t)=>{n.exports=t.p+"1f9397ed28ee6fcc00a0.woff2"}},e={};function t(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={id:r,exports:{}};return n[r](o,o.exports,t),o.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");if(r.length)for(var i=r.length-1;i>-1&&(!n||!/^http(s?):/.test(n));)n=r[i--].src}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,t.nc=void 0;var r=t(72),i=t.n(r),o=t(825),a=t.n(o),s=t(659),l=t.n(s),c=t(56),d=t.n(c),A=t(540),p=t.n(A),u=t(113),h=t.n(u),f=t(208),m={};m.styleTagTransform=h(),m.setAttributes=d(),m.insert=l().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=p(),i()(f.A,m),f.A&&f.A.locals&&f.A.locals;const g=t.p+"82ed044e158fb717cf48.svg";class y{constructor(n,e,t=!1,r=0){this.length=n,this.sunk=t,this.hit=r,this.name=e}hits(){this.hit+=1,this.sunks()}sunks(){this.hit===this.length&&(this.sunk=!0)}}const b=t.p+"d22119bb982bd78cf265.svg";let C;class v{constructor(n){this.type=n,this.grid=Array(10).fill().map((()=>Array(10).fill(""))),this.carrier=new y(5,"carrier"),this.battleship=new y(4,"battleship"),this.destroyer=new y(3,"destroyer"),this.submarine=new y(3,"submarine"),this.patrolBoat=new y(2,"patrolboat"),this.carrierGrid=[],this.battleshipGrid=[],this.destroyerGrid=[],this.submarineGrid=[],this.patrolBoatGrid=[]}receiveAttack(n,e){let t;if(t="player"===this.type?document.querySelector(`.player > .grid-container > div.row-${n}.col-${e}`):document.querySelector(`.computer > .grid-container > div.row-${n}.col-${e}`),""!==this.grid[n][e]){if(this.grid[n][e]===this.carrier.name){if(this.carrier.hits(),this.carrierGrid.push([n,e]),this.carrier.sunk)for(let n of this.carrierGrid){let e=document.querySelector(`.${this.type} > .grid-container > div.row-${n[0]}.col-${n[1]}`);e.style.backgroundColor="red",this.grid[n[0]][n[1]]="",e.querySelector("img").style.display="inline-block"}else t.style.backgroundColor="yellow",this.grid[n][e]="";return!0}if(this.grid[n][e]===this.battleship.name){if(this.battleship.hits(),this.battleshipGrid.push([n,e]),this.battleship.sunk)for(let n of this.battleshipGrid){let e=document.querySelector(`.${this.type} > .grid-container > div.row-${n[0]}.col-${n[1]}`);e.style.backgroundColor="red",this.grid[n[0]][n[1]]="",e.querySelector("img").style.display="inline-block"}else t.style.backgroundColor="yellow",this.grid[n][e]="";return!0}if(this.grid[n][e]===this.destroyer.name){if(this.destroyer.hits(),this.destroyerGrid.push([n,e]),this.destroyer.sunk)for(let n of this.destroyerGrid){let e=document.querySelector(`.${this.type} > .grid-container > div.row-${n[0]}.col-${n[1]}`);e.style.backgroundColor="red",this.grid[n[0]][n[1]]="",e.querySelector("img").style.display="inline-block"}else t.style.backgroundColor="yellow",this.grid[n][e]="";return!0}if(this.grid[n][e]===this.submarine.name){if(this.submarine.hits(),this.submarineGrid.push([n,e]),this.submarine.sunk)for(let n of this.submarineGrid){let e=document.querySelector(`.${this.type} > .grid-container > div.row-${n[0]}.col-${n[1]}`);e.style.backgroundColor="red",this.grid[n[0]][n[1]]="",e.querySelector("img").style.display="inline-block"}else t.style.backgroundColor="yellow",this.grid[n][e]="";return!0}if(this.grid[n][e]===this.patrolBoat.name){if(this.patrolBoat.hits(),this.patrolBoatGrid.push([n,e]),this.patrolBoat.sunk)for(let n of this.patrolBoatGrid){let e=document.querySelector(`.${this.type} > .grid-container > div.row-${n[0]}.col-${n[1]}`);e.style.backgroundColor="red",this.grid[n[0]][n[1]]="",e.querySelector("img").style.display="inline-block"}else t.style.backgroundColor="yellow",this.grid[n][e]="";return!0}}else if(""===this.grid[n][e])return t.textContent=".",!1}placeShip(n){this.grid.some((n=>n.some((n=>""!==n))))&&(this.grid=Array(10).fill().map((()=>Array(10).fill(""))),document.querySelectorAll(".player > .grid-container > div > img").forEach((n=>n.remove())));let e=[this.carrier,this.battleship,this.destroyer,this.submarine,this.patrolBoat];for(let t of e)for(;;){let e=Math.floor(10*Math.random()),r=e-(t.length-1),i=e+t.length,o=e,a=e;if(e<5){if(C=!0,i<=10&&C){let r=0;for(let n=0;n<t.length&&""===this.grid[o][e];n+=1)r+=1,o+=1;if(r===t.length){for(let r=0;r<t.length;r+=1){this.grid[a][e]=t.name;let r=document.querySelector(`.${n} > .grid-container > .row-${a}.col-${e}`);this.appendshipIcon(r,C),a+=1}break}}else if(r>=0&&C){let i=0;for(let n=0;n<t.length&&""===this.grid[a][r];n+=1)i+=1,a+=1;if(i===t.length){for(let r=0;r<t.length;r+=1){this.grid[a][e]=t.name;let r=document.querySelector(`.${n} > .grid-container > .row-${a}.col-${e}`);this.appendshipIcon(r,C),a+=1}break}}}else if(C=!1,i<=10&&!C){if(this.grid[e].slice(e,i).every((n=>""===n))){for(let r=0;r<t.length;r+=1){this.grid[e][o]=t.name;let r=document.querySelector(`.${n} > .grid-container > .row-${e}.col-${o}`);this.appendshipIcon(r,C),o+=1}break}}else if(r>=0&&!C&&this.grid[e].slice(r,e+1).every((n=>""===n))){for(let i=0;i<t.length;i+=1){this.grid[e][r]=t.name;let i=document.querySelector(`.${n} > .grid-container > .row-${e}.col-${r}`);this.appendshipIcon(i,C),r+=1}break}}console.log(this.grid)}appendshipIcon(n,e){let t=document.createElement("img");t.src=b,t.classList.add("ship-icon"),t.style.width="50%",t.style.height="100%",e?(t.style.transform="rotate(90deg) translate(-50%, -50%",t.style.transformOrigin="top left"):t.style.transform="translate(-50%, -50%)",n.appendChild(t)}}class B{constructor(n){this.gameboard=new v(n)}}let I=document.createElement("img");I.src=g;let x,w=document.querySelector("button.rotate");w.appendChild(I);let k=document.querySelector(".restart"),$="player",S=document.querySelector(".start"),E=document.querySelector(".player > .grid-container"),_=document.querySelector(".computer > .grid-container");function q(n,e){for(let t=0;t<10;t+=1){let r=1;for(let i=0;i<10;i+=1){let o=document.createElement("div");n.appendChild(o);let a=document.createElement("div");e.appendChild(a),a.style.gridColumn=`${r}`,o.style.gridColumn=`${r}`,o.classList.add(`row-${t}`),o.classList.add(`col-${i}`),a.classList.add(`row-${t}`),a.classList.add(`col-${i}`),r+=1}}}q(E,_);let j=new B("player");j.gameboard.placeShip("player");let L=new B("computer");L.gameboard.placeShip("computer"),w.addEventListener("click",(()=>j.gameboard.placeShip("player"))),S.addEventListener("click",(()=>{w.disabled=!0,w.style.opacity="0.5",w.style.cursor="not-allowed",S.style.display="none",R(),"player"===$&&(document.querySelector("div.display").textContent="Your turn")}));let T=null,M=[],G=new Set;function Y(){let n,e,t=!0;if(U(),M.length>0)[n,e]=M.pop();else do{n=Math.floor(10*Math.random()),e=Math.floor(10*Math.random())}while(G.has(`${n},${e}`));if(t=j.gameboard.receiveAttack(n,e),G.add(`${n},${e}`),M=M.filter((([n,e])=>!G.has(`${n},${e}`))),t)return T={row:n,col:e},n>0&&!G.has(`${n-1},${e}`)&&M.push([n-1,e]),n<9&&!G.has(`${n+1},${e}`)&&M.push([n+1,e]),e>0&&!G.has(`${n},${e-1}`)&&M.push([n,e-1]),e<9&&!G.has(`${n},${e+1}`)&&M.push([n,e+1]),j.gameboard.grid.every((n=>n.every((n=>""===n))))?(x=document.createElement("style"),x.textContent='\n                .computer::before {\n                    content: "Computer Wins";\n                    font-family: "intro_rust_gbase_2_line", sans-serif;\n                    display: flex;\n                    justify-content: center;\n                    align-items: center;\n                    width: 100%;\n                    height: 100%;\n                    position: absolute;\n                    z-index: 2;\n                    top: 0;\n                    left: 0;\n                    background-color: #7dd3fc;\n                    font-size: 2rem;\n                    border-radius: 20px;\n                }\n                .computer {\n                    z-index: 1;\n                }\n            ',document.head.appendChild(x),void(k.style.display="inline-block")):void setTimeout(Y,2e3);$="player",document.querySelector("div.display").textContent="Your turn",R()}let z=new Set;function D(n){!function(n){if(!z.has(`${n.classList.value.split(" ")[0].split("-")[1]},${n.classList.value.split(" ")[1].split("-")[1]}`)){let e=L.gameboard.receiveAttack(n.classList.value.split(" ")[0].split("-")[1],n.classList.value.split(" ")[1].split("-")[1]);z.add(`${n.classList.value.split(" ")[0].split("-")[1]},${n.classList.value.split(" ")[1].split("-")[1]}`),e?L.gameboard.grid.every((n=>n.every((n=>""===n))))&&(x=document.createElement("style"),x.textContent='\n                    .player::before {\n                        content: "You Win";\n                        font-family: "intro_rust_gbase_2_line", sans-serif;\n                        display: flex;\n                        justify-content: center;\n                        align-items: center;\n                        width: 100%;\n                        height: 100%;\n                        position: absolute;\n                        z-index: 2;\n                        top: 0;\n                        left: 0;\n                        background-color: #7dd3fc;\n                        font-size: 2rem;\n                        border-radius: 20px;\n                    }\n                    .player {\n                        z-index: 1;\n                    }\n                ',document.head.appendChild(x),k.style.display="inline-block"):($="computer",U(),document.querySelector("div.display").textContent="Computer's turn",setTimeout(Y,2e3))}}(n.target.closest("div"))}function R(){document.querySelectorAll(".computer > .grid-container > div").forEach((n=>{n.addEventListener("click",D)}))}function U(){document.querySelectorAll(".computer > .grid-container > div").forEach((n=>{n.removeEventListener("click",D)}))}k.addEventListener("click",(()=>{x&&document.head.removeChild(x),k.style.display="none",E.innerHTML="",_.innerHTML="",q(E,_),j=new B("player"),L=new B("computer"),j.gameboard.placeShip("player"),L.gameboard.placeShip("computer"),w.disabled=!1,w.style.opacity="1",w.style.cursor="pointer",S.style.display="inline-block",document.querySelector("div.display").textContent="Edit Ship Placement Using this Button",T=null,M=[],G=new Set,z=new Set}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,